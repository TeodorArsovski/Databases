BEGIN
  -- BUY_SELL
  EXECUTE IMMEDIATE 'DROP TABLE BUY_SELL       CASCADE CONSTRAINTS';
   -- S_STORED
  EXECUTE IMMEDIATE 'DROP TABLE S_STORED      CASCADE CONSTRAINTS';
   -- FOLLOW
  EXECUTE IMMEDIATE 'DROP TABLE FOLLOW     CASCADE CONSTRAINTS';
  -- SHOP
  EXECUTE IMMEDIATE 'DROP TABLE SHOP           CASCADE CONSTRAINTS';
  -- RECEIVE
  EXECUTE IMMEDIATE 'DROP TABLE RECEIVE       CASCADE CONSTRAINTS';
  -- HAS
  EXECUTE IMMEDIATE 'DROP TABLE HAS       CASCADE CONSTRAINTS';
   -- P_STORED
  EXECUTE IMMEDIATE 'DROP TABLE P_STORED      CASCADE CONSTRAINTS';
  
  -- FEED 
  EXECUTE IMMEDIATE 'DROP TABLE FEED           CASCADE CONSTRAINTS';
  -- ANIMAL
  EXECUTE IMMEDIATE 'DROP TABLE ANIMAL CASCADE CONSTRAINTS';
  -- BARN
  EXECUTE IMMEDIATE 'DROP TABLE BARN CASCADE CONSTRAINTS';
  -- FARMBUILDING
  EXECUTE IMMEDIATE 'DROP TABLE FARMBUILDING CASCADE CONSTRAINTS';
  -- FARM
  EXECUTE IMMEDIATE 'DROP TABLE FARM CASCADE CONSTRAINTS';
  -- BUILDING
  EXECUTE IMMEDIATE 'DROP TABLE BUILDING CASCADE CONSTRAINTS';
  -- GROW
  EXECUTE IMMEDIATE 'DROP TABLE GROW CASCADE CONSTRAINTS';
  -- CULTIVATIONFIELD
  EXECUTE IMMEDIATE 'DROP TABLE CULTIVATIONFIELD CASCADE CONSTRAINTS';
  -- PRODUCE
  EXECUTE IMMEDIATE 'DROP TABLE PRODUCE CASCADE CONSTRAINTS';
  -- PRODUCT
  EXECUTE IMMEDIATE 'DROP TABLE PRODUCT CASCADE CONSTRAINTS';
  -- CROP
  EXECUTE IMMEDIATE 'DROP TABLE CROP CASCADE CONSTRAINTS';

  -- ANIMAL_SPECIE
  EXECUTE IMMEDIATE 'DROP TABLE ANIMAL_SPECIE   CASCADE CONSTRAINTS';
  -- SUPPLY 
  EXECUTE IMMEDIATE 'DROP TABLE SUPPLY         CASCADE CONSTRAINTS';
  -- SEED 
  EXECUTE IMMEDIATE 'DROP TABLE SEED           CASCADE CONSTRAINTS';
  -- LETTER 
  EXECUTE IMMEDIATE 'DROP TABLE LETTER           CASCADE CONSTRAINTS';
  --PLAYERMISSION
  EXECUTE IMMEDIATE 'DROP TABLE PLAYERMISSION CASCADE CONSTRAINTS';
  --MISSION
  EXECUTE IMMEDIATE 'DROP TABLE MISSION CASCADE CONSTRAINTS';
  -- PLAYER 
  EXECUTE IMMEDIATE 'DROP TABLE PLAYER         CASCADE CONSTRAINTS';
  -- FOOD  
  EXECUTE IMMEDIATE 'DROP TABLE FOOD           CASCADE CONSTRAINTS';
  -- ITEM  
  EXECUTE IMMEDIATE 'DROP TABLE ITEM           CASCADE CONSTRAINTS';
  -- PLACE 
  EXECUTE IMMEDIATE 'DROP TABLE PLACE          CASCADE CONSTRAINTS';
  -- SCHEDULE 
  EXECUTE IMMEDIATE 'DROP TABLE SCHEDULE       CASCADE CONSTRAINTS';
    -- INHABITANT
  EXECUTE IMMEDIATE 'DROP TABLE INHABITANT       CASCADE CONSTRAINTS';
  -- RELATIONSHIP
  EXECUTE IMMEDIATE 'DROP TABLE RELATIONSHIP   CASCADE CONSTRAINTS';
    -- CHARACTER
  EXECUTE IMMEDIATE 'DROP TABLE CHARACTER       CASCADE CONSTRAINTS';
  -- VILLAGE
  EXECUTE IMMEDIATE 'DROP TABLE VILLAGE       CASCADE CONSTRAINTS';
  -- CONTAINS
  EXECUTE IMMEDIATE 'DROP TABLE CONTAINS       CASCADE CONSTRAINTS';
  -- DIALOGUE
  EXECUTE IMMEDIATE 'DROP TABLE DIALOGUE       CASCADE CONSTRAINTS';
  -- AUTOGENERATOR ID PRODUCT
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_PRODUCT_ID';
  -- AUTOGENERATOR ID CROP
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_CROP_ID';
  -- AUTOGENERATOR ID MISSION
EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_MISSION_ID';


  

EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;
/


CREATE TABLE VILLAGE (
  ID_VILLAGE  NUMBER        PRIMARY KEY,
  NAME        VARCHAR2(100) NOT NULL
);

CREATE TABLE CHARACTER (
  ID_CHARACTER  NUMBER        PRIMARY KEY,
  NAME          VARCHAR2(100) NOT NULL,
  AGE           NUMBER,
  GENDER        VARCHAR2(20),
  ID_VILLAGE    NUMBER,
  CONSTRAINT FK_CHARACTER_VILLAGE
    FOREIGN KEY (ID_VILLAGE)
    REFERENCES VILLAGE (ID_VILLAGE)
);

CREATE TABLE RELATIONSHIP (
  ID_RELATIONSHIP NUMBER        PRIMARY KEY,
  ID_CHARACTER1   NUMBER        NOT NULL,
  ID_CHARACTER2   NUMBER        NOT NULL,
  AFFECTION_LEVEL NUMBER        CHECK (AFFECTION_LEVEL BETWEEN 0 AND 100),
  TYPE_RELATION   VARCHAR2(30),

  CONSTRAINT FK_REL_CHAR1 FOREIGN KEY (ID_CHARACTER1)
    REFERENCES CHARACTER (ID_CHARACTER),
  CONSTRAINT FK_REL_CHAR2 FOREIGN KEY (ID_CHARACTER2)
    REFERENCES CHARACTER (ID_CHARACTER),

  CONSTRAINT CK_REL_NOT_SELF CHECK (ID_CHARACTER1 <> ID_CHARACTER2),
  CONSTRAINT UK_REL_PAIR UNIQUE (ID_CHARACTER1, ID_CHARACTER2)
);

CREATE TABLE INHABITANT (
  ID_INHABITANT        NUMBER       PRIMARY KEY,  
  PERSONALITY VARCHAR2(200),
  BIRTHDAY             DATE,
  SPRITE VARCHAR2(200),
  APPEARENCE              VARCHAR2(200),
  CONSTRAINT FK_INHABITANT_CHARACTER
    FOREIGN KEY (ID_INHABITANT)
    REFERENCES CHARACTER (ID_CHARACTER)
);

CREATE TABLE DIALOGUE (
  ID_DIALOGUE  NUMBER        PRIMARY KEY,
  CONTENT      CLOB          NOT NULL,
  TYPE         VARCHAR2(10)  CHECK (TYPE IN ('OPTIONAL','MANDATORY'))
);

CREATE TABLE CONTAINS (
  ID_DIALOGUE    NUMBER,
  ID_INHABITANT  NUMBER,
  PRIMARY KEY (ID_DIALOGUE, ID_INHABITANT),
  CONSTRAINT FK_CONTAINS_DIALOGUE
    FOREIGN KEY (ID_DIALOGUE)
    REFERENCES DIALOGUE (ID_DIALOGUE),
  CONSTRAINT FK_CONTAINS_INHABITANT
    FOREIGN KEY (ID_INHABITANT)
    REFERENCES INHABITANT (ID_INHABITANT)
);

CREATE TABLE SCHEDULE (
 ID_SCHEDULE   NUMBER        PRIMARY KEY,
 SEASON        VARCHAR2(20), 
 START_TIME    VARCHAR2(5),   
 END_TIME      VARCHAR2(5),    
 DAY_OF_WEEK   VARCHAR2(10)    
);
CREATE TABLE PLACE (
 ID_PLACE      NUMBER PRIMARY KEY,
 LOCATION_NAME VARCHAR2(200),
 COORDINATES   VARCHAR2(50)
);

CREATE TABLE BUILDING (
    ID_BUILDING NUMBER PRIMARY KEY,
    NAME_BUILDING VARCHAR2(100),
    DESCRIPTION VARCHAR2(250),
    ID_PLACE NUMBER,
    CONSTRAINT FK_BULDING_PLACE FOREIGN KEY (ID_PLACE)
        REFERENCES PLACE(ID_PLACE)
);

CREATE TABLE HAS (
  ID_INHABITANT  NUMBER,
  ID_PLACE       NUMBER,
  ID_SCHEDULE    NUMBER,
  DT_ACTIVE      DATE,
  PRIMARY KEY (ID_INHABITANT, ID_PLACE, ID_SCHEDULE),
  CONSTRAINT FK_HAS_INHABITANT
    FOREIGN KEY (ID_INHABITANT)
    REFERENCES INHABITANT (ID_INHABITANT),
  CONSTRAINT FK_HAS_PLACE
    FOREIGN KEY (ID_PLACE)
    REFERENCES PLACE (ID_PLACE),
  CONSTRAINT FK_HAS_SCHEDULE
    FOREIGN KEY (ID_SCHEDULE)
    REFERENCES SCHEDULE (ID_SCHEDULE)
);

CREATE TABLE ITEM (
   ID_ITEM        NUMBER        PRIMARY KEY,
   NAME           VARCHAR2(100) NOT NULL,
   DESCRIPTION    VARCHAR2(250),
   PRICE_TO_BUY   NUMBER,
   PRICE_TO_SELL  NUMBER
);

CREATE TABLE PLAYER (
  ID_PLAYER          NUMBER        PRIMARY KEY,     -- *also* FK â†’ CHARACTER
  AVATAR_APPEARANCE  VARCHAR2(100),
  NICKNAME           VARCHAR2(50),
  GOLD               NUMBER,
  EXPERIENCE         NUMBER,
  SKILL_LEVEL        NUMBER,
  SKILL        VARCHAR2(100),
  CONSTRAINT FK_PLAYER_CHARACTER
    FOREIGN KEY (ID_PLAYER)
    REFERENCES CHARACTER (ID_CHARACTER)
);

CREATE TABLE MISSION (
  ID_MISSION    NUMBER PRIMARY KEY,
  NAME          VARCHAR2(100),
  DESCRIPTION   VARCHAR2(500)
);


CREATE TABLE PLAYER_MISSION (
  ID_PLAYER      NUMBER,
  ID_MISSION     NUMBER,
  START_DATE     TIMESTAMP,
  END_DATE       TIMESTAMP,
  IS_COMPLETED   NUMBER(1) DEFAULT 0 CHECK (IS_COMPLETED IN (0, 1)),

  PRIMARY KEY (ID_PLAYER, ID_MISSION),

  CONSTRAINT FK_PM_PLAYER FOREIGN KEY (ID_PLAYER)
    REFERENCES PLAYER(ID_PLAYER),

  CONSTRAINT FK_PM_MISSION FOREIGN KEY (ID_MISSION)
    REFERENCES MISSION(ID_MISSION)
);

CREATE TABLE LETTER (
  ID_LETTER  NUMBER        PRIMARY KEY,           
  CONTENT    CLOB,
  FONT       VARCHAR2(100),
  ID_MISSION NUMBER,
  CONSTRAINT FK_LETTER_ITEM
    FOREIGN KEY (ID_LETTER)
    REFERENCES ITEM (ID_ITEM),
  CONSTRAINT FK_LETTER_MISSION 
    FOREIGN KEY (ID_MISSION)
    REFERENCES MISSION(ID_MISSION)
);

CREATE TABLE FOOD (
   ID_FOOD        NUMBER        PRIMARY KEY,
   INGREDIENTS    VARCHAR2(200),
   ENERGY_REGAIN  NUMBER,
   HEALTH_REGAIN  NUMBER,
   CONSTRAINT FK_FOOD_ITEM FOREIGN KEY (ID_FOOD)
     REFERENCES ITEM(ID_ITEM)
);
CREATE TABLE SEED (
  ID_SEED      NUMBER PRIMARY KEY,
  SEED_TYPE    VARCHAR2(100),
  NAME_CROP    VARCHAR2(100),
  CONSTRAINT FK_SEED_ITEM FOREIGN KEY (ID_SEED)
    REFERENCES ITEM(ID_ITEM)
);


CREATE TABLE SUPPLY (
   ID_SUPPLY            NUMBER        PRIMARY KEY,
   NUTRITIONAL_VALUE    NUMBER(8),
   NUTRITIONAL_QUALITIES VARCHAR2(50),
   CONSTRAINT FK_SUPPLY_ITEM FOREIGN KEY (ID_SUPPLY)
     REFERENCES ITEM(ID_ITEM)
);
CREATE TABLE ANIMAL_SPECIE (
   ID_ANIMAL_SPECIE NUMBER PRIMARY KEY,
   SPECIE_NAME      VARCHAR2(100)
);

CREATE TABLE FEED (
   ID_SUPPLY          NUMBER,
   ID_ANIMAL_SPECIE   NUMBER,
   PRIMARY KEY (ID_SUPPLY, ID_ANIMAL_SPECIE),
   CONSTRAINT FK_FEED_SUPPLY FOREIGN KEY (ID_SUPPLY)
     REFERENCES SUPPLY(ID_SUPPLY),
   CONSTRAINT FK_FEED_ANIMAL_SPECIE FOREIGN KEY (ID_ANIMAL_SPECIE)
     REFERENCES ANIMAL_SPECIE(ID_ANIMAL_SPECIE)
);


CREATE TABLE P_STORED(
  ID_PLAYER NUMBER,
  ID_ITEM   NUMBER,
  QUANTITY  NUMBER,

  PRIMARY KEY(ID_PLAYER, ID_ITEM),
  CONSTRAINT FK_P_STORED_PLAYER FOREIGN KEY(ID_PLAYER)
  REFERENCES PLAYER(ID_PLAYER),
  CONSTRAINT FK_P_STORED_ITEM FOREIGN KEY(ID_ITEM)
  REFERENCES ITEM(ID_ITEM)
);

-- FARM
CREATE TABLE FARM (
    ID_FARM NUMBER PRIMARY KEY,
    HECTARES NUMBER(10,2),
    SPECIALIZATION VARCHAR2(100),
    ID_PLAYER NUMBER,
    CONSTRAINT FK_FARM_BUILDING FOREIGN KEY (ID_FARM)
        REFERENCES BUILDING(ID_BUILDING),
    CONSTRAINT FK_FARM_PLAYER FOREIGN KEY (ID_PLAYER)
        REFERENCES PLAYER(ID_PLAYER)
);

-- FARMBUILDING
CREATE TABLE FARMBUILDING (
    ID_FARM_BUILDING NUMBER PRIMARY KEY,
    NAME_BUILDING VARCHAR2(100),
    DESCRIPTION VARCHAR2(250),
    BUILDING_SIZE NUMBER(10,2),
    ID_FARM NUMBER,
    CONSTRAINT FK_FARMBUILDING_FARM FOREIGN KEY (ID_FARM)
     REFERENCES FARM(ID_FARM)
);

-- BARN
CREATE TABLE BARN (
    ID_BARN NUMBER PRIMARY KEY,
    MAX_CAPACITY NUMBER,
    OCCUPIED_SPOTS NUMBER,
    CONSTRAINT FK_BARN_FARMBUILDING FOREIGN KEY (ID_BARN)
        REFERENCES FARMBUILDING(ID_FARM_BUILDING)
);

-- ANIMAL
CREATE TABLE ANIMAL (
    ID_ANIMAL NUMBER PRIMARY KEY,
    NAME_ANIMAL VARCHAR2(100),
    AGE NUMBER,
    ID_ANIMAL_SPECIE NUMBER,
    HEALTH VARCHAR2(50),
    ID_BARN NUMBER,
    QUANTITY NUMBER,
    CONSTRAINT FK_ANIMAL_BARN FOREIGN KEY (ID_BARN)
        REFERENCES BARN(ID_BARN),
    CONSTRAINT FK_ANIMAL_SPECIE FOREIGN KEY (ID_ANIMAL_SPECIE)
        REFERENCES ANIMAL_SPECIE(ID_ANIMAL_SPECIE)
);

-- PRODUCT
CREATE TABLE PRODUCT (
    ID_PRODUCT NUMBER PRIMARY KEY,
    NAME_PRODUCT VARCHAR2(100),
    ID_ANIMAL_SPECIE NUMBER,
    CONSTRAINT FK_PRODUCT_ANIMALSPECIE FOREIGN KEY (ID_ANIMAL_SPECIE)
        REFERENCES ANIMAL_SPECIE(ID_ANIMAL_SPECIE)
);

--PRODUCE (n-m table)
CREATE TABLE PRODUCE (
    ID_ANIMAL NUMBER,
    ID_PRODUCT NUMBER,
    PRODUCTION_DATE DATE,
    EXPIRATION_DATE DATE,
    QUALITY VARCHAR2(50),
    PRIMARY KEY (ID_ANIMAL, ID_PRODUCT),
    CONSTRAINT FK_PRODUCE_ANIMAL FOREIGN KEY (ID_ANIMAL)
        REFERENCES ANIMAL(ID_ANIMAL),
    CONSTRAINT FK_PRODUCE_PRODUCT FOREIGN KEY (ID_PRODUCT)
        REFERENCES PRODUCT(ID_PRODUCT)
);

-- CULTIVATION FIELD
CREATE TABLE CULTIVATIONFIELD (
    ID_FIELD NUMBER PRIMARY KEY,
    COST NUMBER(10,2),
    state VARCHAR2(100),
    CONSTRAINT FK_FIELD_FARMBUILDING FOREIGN KEY (ID_FIELD)
        REFERENCES FARMBUILDING(ID_FARM_BUILDING)
);

-- CROP
CREATE TABLE CROP (
    ID_CROP NUMBER PRIMARY KEY,
    NAME_CROP VARCHAR2(100),
    GROWING_SEASON VARCHAR2(100),
    GROWTH_DURATION NUMBER,
    QUALITY VARCHAR2(100)
);

-- GROW (n-m table)
CREATE TABLE GROW (
    ID_FIELD NUMBER,
    ID_CROP NUMBER,
    PRIMARY KEY (ID_FIELD, ID_CROP),
    CONSTRAINT FK_GROW_FIELD FOREIGN KEY (ID_FIELD)
        REFERENCES CULTIVATIONFIELD(ID_FIELD),
    CONSTRAINT FK_GROW_CROP FOREIGN KEY (ID_CROP)
        REFERENCES CROP(ID_CROP)
);

CREATE TABLE RECEIVE (
  ID_INHABITANT  NUMBER,
  ID_PLAYER      NUMBER,
  ID_LETTER      NUMBER,
  DATE_SENT      DATE,
  EMOTION        VARCHAR2(50),
  PRIMARY KEY (ID_INHABITANT, ID_PLAYER, ID_LETTER, DATE_SENT),
  CONSTRAINT FK_RECEIVE_INHABITANT
    FOREIGN KEY (ID_INHABITANT)
    REFERENCES INHABITANT (ID_INHABITANT),
  CONSTRAINT FK_RECEIVE_PLAYER
    FOREIGN KEY (ID_PLAYER)
    REFERENCES PLAYER (ID_PLAYER),
  CONSTRAINT FK_RECEIVE_LETTER
    FOREIGN KEY (ID_LETTER)
    REFERENCES LETTER (ID_LETTER)
);
CREATE TABLE SHOP (
  ID_SHOP         NUMBER PRIMARY KEY,
  NAME_SHOP       VARCHAR2(100),
  ID_PLACE        NUMBER,
  SPECIALIZATION  VARCHAR2(50),
  DESCRIPTION     VARCHAR2(100),
  CONSTRAINT FK_SHOP_PLACE     FOREIGN KEY (ID_PLACE) REFERENCES PLACE(ID_PLACE)
);

CREATE TABLE FOLLOW (
  ID_SHOP      NUMBER        NOT NULL,
  ID_SCHEDULE  NUMBER        NOT NULL,
  CONSTRAINT PK_FOLLOW PRIMARY KEY (ID_SHOP, ID_SCHEDULE),
  CONSTRAINT FK_FOLLOW_SHOP FOREIGN KEY (ID_SHOP)
    REFERENCES SHOP (ID_SHOP)
    ON DELETE CASCADE,
  CONSTRAINT FK_FOLLOW_SCHEDULE FOREIGN KEY (ID_SCHEDULE)
    REFERENCES SCHEDULE (ID_SCHEDULE)
    ON DELETE CASCADE
);

CREATE TABLE S_STORED(
  ID_SHOP NUMBER,
  ID_ITEM   NUMBER,
  QUANTITY  NUMBER,

  PRIMARY KEY(ID_SHOP, ID_ITEM),
  CONSTRAINT FK_S_STORED_SHOP FOREIGN KEY(ID_SHOP)
  REFERENCES SHOP(ID_SHOP),
  CONSTRAINT FK_S_STORED_ITEM FOREIGN KEY(ID_ITEM)
  REFERENCES ITEM(ID_ITEM)
);


CREATE TABLE BUY_SELL (
   ID_SHOP           NUMBER,
   ID_PLAYER         NUMBER,
   ID_ITEM           NUMBER,
   ACTION_TIME       DATE,
   ACTION            VARCHAR2(10)  CHECK (ACTION IN ('BUY','SELL')),
   MONEY_FLUCTUATION NUMBER,
   AMOUNT            NUMBER,
   PRIMARY KEY (ID_SHOP, ID_PLAYER, ID_ITEM, ACTION_TIME),
   CONSTRAINT FK_BS_SHOP   FOREIGN KEY (ID_SHOP)
     REFERENCES SHOP(ID_SHOP),
   CONSTRAINT FK_BS_PLAYER FOREIGN KEY (ID_PLAYER)
     REFERENCES PLAYER(ID_PLAYER),
   CONSTRAINT FK_BS_ITEM   FOREIGN KEY (ID_ITEM)
     REFERENCES ITEM(ID_ITEM)
);


