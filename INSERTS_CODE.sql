-- ITEM TABLE
INSERT INTO ITEM(ID_ITEM, NAME, DESCRIPTION, PRICE_TO_BUY, PRICE_TO_SELL)
SELECT
    TO_NUMBER(ID),
    NAME,
    DESCRIPTION,
    TO_NUMBER(PRICE_TO_BUY),
    TO_NUMBER(PRICE_TO_SELL)
FROM ITEMS_DATA;

-- FOOD TABLE
INSERT INTO FOOD (ID_FOOD, INGREDIENTS, ENERGY_REGAIN, HEALTH_REGAIN)
SELECT DISTINCT
   TO_NUMBER(ID),
   INGREDIENTS,
   TO_NUMBER(ENERGY),
   TO_NUMBER(HEALTH)
FROM ITEMS_DATA
WHERE INGREDIENTS IS NOT NULL AND ENERGY IS NOT NULL AND HEALTH IS NOT NULL;

-- SEED TABLE
INSERT INTO SEED (ID_SEED, SEED_TYPE, NAME_CROP)
SELECT
   TO_NUMBER(ID),
   TYPE,
   NAME_CROP
FROM ITEMS_DATA
WHERE NAME_CROP IS NOT NULL;

-- SUPPLY TABLE
INSERT INTO SUPPLY (ID_SUPPLY, NUTRITIONAL_VALUE, NUTRITIONAL_QUALITIES)
SELECT
   TO_NUMBER(ID),
   TO_NUMBER(NUTRITIONAL_VALUE),
   QUALITY
FROM ITEMS_DATA
WHERE NUTRITIONAL_VALUE IS NOT NULL
 AND QUALITY IS NOT NULL
 AND NOT EXISTS (
     SELECT 1 FROM SUPPLY s
     WHERE s.ID_SUPPLY = TO_NUMBER(ITEMS_DATA.ID)
 );

-- ANIMAL SPECIE TABLE
INSERT INTO ANIMAL_SPECIE (ID_ANIMAL_SPECIE, SPECIE_NAME)
SELECT ROWNUM, SPECIE_NAME
FROM (
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ITEMS_DATA WHERE ANIMAL_SPECIE IS NOT NULL
   UNION
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ANIMALS_PRODUCTS WHERE ANIMAL_SPECIE IS NOT NULL
);

-- PLACE TABLE 
INSERT INTO PLACE (
 ID_PLACE,
 LOCATION_NAME,
 COORDINATES
)
SELECT
 ROWNUM   AS ID_PLACE,
 LOCATION_NAME,
 COORDINATES
FROM (
 -- 1) from festivity shops 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM FESTIVITY_SHOPS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 2) from festivity persons
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM FESTIVITY_PERSONS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 3) from events 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM EVENTS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 4) from schedules 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM SCHEDULES
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
);  

INSERT INTO VILLAGE (ID_VILLAGE, NAME)
SELECT
  ROWNUM            AS ID_VILLAGE,
  uv.NAME
FROM (
  SELECT DISTINCT VILLAGE AS NAME
  FROM   RESIDENTS
  WHERE  VILLAGE IS NOT NULL

  UNION

  SELECT DISTINCT VILLAGE AS NAME
  FROM   PLAYER_DATA
  WHERE  VILLAGE IS NOT NULL
) uv
WHERE NOT EXISTS (
  SELECT 1
  FROM   VILLAGE v
  WHERE  v.NAME = uv.NAME
);

INSERT INTO CHARACTER (
  ID_CHARACTER,
  NAME,
  AGE,
  GENDER,
  ID_VILLAGE
)
SELECT
  TO_NUMBER(pd.ID)      AS ID_CHARACTER,
  pd.NAME,
  TO_NUMBER(pd.AGE)     AS AGE,
  pd.GENDER,
  v.ID_VILLAGE
FROM (
  SELECT pd.*,
         ROW_NUMBER() OVER (PARTITION BY pd.ID ORDER BY ROWNUM) AS rn
  FROM   PLAYER_DATA pd
) pd
LEFT JOIN VILLAGE v
  ON TRIM(pd.VILLAGE) = v.NAME
WHERE pd.rn = 1
  AND NOT EXISTS (
    SELECT 1
    FROM   CHARACTER c
    WHERE  c.ID_CHARACTER = TO_NUMBER(pd.ID)
  );

INSERT INTO PLAYER (
  ID_PLAYER, 
  AVATAR_APPEARANCE, 
  NICKNAME, GOLD, 
  EXPERIENCE, 
  SKILL_LEVEL, 
  SKILL)
SELECT 
  TO_NUMBER(ID), 
  APPARENCE, 
  NICKNAME, 
  TO_NUMBER(GOLD), 
  TO_NUMBER(EXPERIENCE), 
  TO_NUMBER(SKILL_LEVEL), 
  SKILL
FROM PLAYER_DATA pd
WHERE ROWID = (
  SELECT MIN(ROWID) 
  FROM PLAYER_DATA 
  WHERE ID = pd.ID
);

INSERT INTO CHARACTER (
  ID_CHARACTER,
  NAME,
  AGE,
  GENDER,
  ID_VILLAGE
)
SELECT
  TO_NUMBER(r.ID),
  r.NAME,
  TO_NUMBER(r.AGE),
  r.GENDER,
  ( SELECT v.ID_VILLAGE
      FROM VILLAGE v
     WHERE v.NAME = r.VILLAGE
       AND ROWNUM = 1 )
FROM (
  SELECT r.*,
         ROW_NUMBER() OVER (PARTITION BY r.ID ORDER BY ROWNUM) AS rn
  FROM RESIDENTS r
) r
WHERE r.rn = 1
  AND TO_NUMBER(r.ID) NOT IN (
        SELECT ID_CHARACTER FROM CHARACTER
      );

INSERT INTO INHABITANT (
  ID_INHABITANT,
  PERSONALITY,
  BIRTHDAY,         
  SPRITE,
  APPEARENCE
)
SELECT
  TO_NUMBER(r.ID) AS ID_INHABITANT,
  r.PERSONALITY,
  r.BIRTHDAY,          
  r.SPRITE,
  r.APPARENCE
FROM (
  SELECT r.*,
         ROW_NUMBER() OVER (PARTITION BY r.ID ORDER BY ROWNUM) AS rn
  FROM RESIDENTS r
) r
WHERE r.rn = 1
  AND NOT EXISTS (
        SELECT 1
        FROM INHABITANT i
        WHERE i.ID_INHABITANT = TO_NUMBER(r.ID)
      );

INSERT INTO DIALOGUE (
  ID_DIALOGUE,
  ID_INHABITANT,
  CONTENT,
  SKIPPABLE
)
SELECT
  TO_NUMBER(ID_DIALOGUE) AS ID_DIALOGUE,
  TO_NUMBER(ID)          AS ID_INHABITANT,
  TEXT_DIALOGUE          AS CONTENT,
  SKIPPABLE              AS SKIPPABLE
FROM (
  SELECT DISTINCT
    ID_DIALOGUE,
    ID,
    TEXT_DIALOGUE,
    SKIPPABLE
  FROM RESIDENTS
  WHERE ID_DIALOGUE   IS NOT NULL
    AND TEXT_DIALOGUE IS NOT NULL
    AND SKIPPABLE     IS NOT NULL    -- just ensure there is a value
) dedup
WHERE NOT EXISTS (
  SELECT 1
  FROM   DIALOGUE d
  WHERE  d.ID_DIALOGUE = TO_NUMBER(dedup.ID_DIALOGUE)
);


-- SHOP table
INSERT INTO SHOP (
ID_SHOP,
  NAME_SHOP,
  DESCRIPTION,
  SPECIALIZATION,
  ID_PLACE)
SELECT DISTINCT
  TO_NUMBER(t.ID_SHOP) AS ID_SHOP,
  t.NAME               AS NAME_SHOP,
  t.DESCRIPTION,
  t.SPECIALIZATION,
  ( SELECT ID_PLACE                      
      FROM   PLACE pl WHERE  pl.LOCATION_NAME = t.LOCATION_NAME
      AND    ROWNUM = 1 ) AS ID_PLACE
FROM   TRANSACTIONS t
WHERE  NOT EXISTS ( 
  SELECT 1
  FROM   SHOP s
  WHERE  s.ID_SHOP = TO_NUMBER(t.ID_SHOP) );

-- P_STORED table
INSERT INTO P_STORED 
        (ID_ITEM, ID_PLAYER, QUANTITY)
SELECT  ID_ITEM,
        ID_PLAYER,
        SUM(AMOUNT) AS QUANTITY
FROM    INVENTORIES
WHERE   ID_PLAYER IS NOT NULL
GROUP BY ID_ITEM, ID_PLAYER;

--S_STORED table

INSERT INTO S_STORED 
        (ID_ITEM, ID_SHOP, QUANTITY)
SELECT  ID_ITEM,
        ID_SHOP,
        SUM(AMOUNT) AS QUANTITY 
FROM    INVENTORIES
WHERE   ID_SHOP IS NOT NULL
GROUP BY ID_ITEM, ID_SHOP;

-- BUY_SELL table Buy side
INSERT INTO BUY_SELL (
        ID_SHOP,
        ID_ITEM,
        ID_PLAYER,
        ACTION_TIME,
        ACTION,
        MONEY_FLUCTUATION,
        AMOUNT
)
SELECT  t.ID_SHOP,
        t.BUY_ITEM                       AS ID_ITEM,
        t.CLIENT                         AS ID_PLAYER,
        MAX(t.DATE_OF_PURCHASE)          AS ACTION_TIME,      
        'BUY'                            AS ACTION,
        -1 * MAX(it.PRICE_TO_BUY)        
            * SUM(t.AMOUNT_TO_BUY)       AS MONEY_FLUCTUATION,
        SUM(t.AMOUNT_TO_BUY)             AS AMOUNT
FROM    TRANSACTIONS t
JOIN    ITEM  it  ON it.ID_ITEM  = t.BUY_ITEM      
JOIN    SHOP  sp  ON sp.ID_SHOP  = t.ID_SHOP       
JOIN    PLAYER pl ON pl.ID_PLAYER = t.CLIENT
WHERE   t.ID_SHOP         IS NOT NULL
  AND   t.BUY_ITEM        IS NOT NULL
  AND   t.CLIENT          IS NOT NULL
  AND   t.AMOUNT_TO_BUY   IS NOT NULL
  AND   t.DATE_OF_PURCHASE IS NOT NULL
GROUP BY t.ID_SHOP,
         t.BUY_ITEM,
         t.CLIENT;

-- BUY_SELL table SELL side
INSERT INTO BUY_SELL (
        ID_SHOP,
        ID_ITEM,
        ID_PLAYER,
        ACTION_TIME,
        ACTION,
        MONEY_FLUCTUATION,
        AMOUNT
)
  SELECT  t.ID_SHOP,
          t.SELLS_ITEM                                          AS ID_ITEM,
        t.CLIENT2                                               AS ID_PLAYER,
        MAX(t.DATE_OF_SALE)                                     AS ACTION_TIME,
        'SELL'                                                  AS ACTION,
        +1 * MAX(it.PRICE_TO_SELL) * SUM(t.AMOUNT_TO_SELL)      AS MONEY_FLUCTUATION,
        SUM(t.AMOUNT_TO_SELL)                                   AS AMOUNT
FROM    TRANSACTIONS t
    JOIN    ITEM  it  ON it.ID_ITEM  = t.SELLS_ITEM
    JOIN    SHOP  sp  ON sp.ID_SHOP  = t.ID_SHOP
    JOIN    PLAYER pl ON pl.ID_PLAYER = t.CLIENT2
WHERE   t.ID_SHOP        IS NOT NULL
    AND   t.SELLS_ITEM     IS NOT NULL
    AND   t.CLIENT2        IS NOT NULL
    AND   t.AMOUNT_TO_SELL IS NOT NULL
    AND   t.DATE_OF_SALE   IS NOT NULL
GROUP BY t.ID_SHOP,
         t.SELLS_ITEM,
         t.CLIENT2;

-- FEED table
INSERT INTO FEED (ID_SUPPLY,
                  ID_ANIMAL_SPECIE)
SELECT DISTINCT
       s.ID_SUPPLY,
       sp.ID_ANIMAL_SPECIE
FROM   ITEMS_DATA it
  JOIN SUPPLY s
    ON s.ID_SUPPLY = TO_NUMBER(it.ID)
   AND it.NUTRITIONAL_VALUE    IS NOT NULL
   AND it.QUALITY IS NOT NULL

  JOIN ANIMAL_SPECIE sp
    ON sp.SPECIE_NAME = it.ANIMAL_SPECIE

WHERE  NOT EXISTS (
         SELECT 1
         FROM   FEED f
         WHERE  f.ID_SUPPLY        = s.ID_SUPPLY
           AND  f.ID_ANIMAL_SPECIE = sp.ID_ANIMAL_SPECIE
       );


-- Schedule (inserts from shop side)
INSERT INTO SCHEDULE (
    ID_SCHEDULE,
    SEASON,
    START_TIME,
    END_TIME,
    DAY_OF_WEEK
)
WITH distinct_slots AS (
  SELECT DISTINCT
         START_SCHEDULE AS START_TIME,
         END_SCHEDULE   AS END_TIME,
         DAY_OF_WEEK
  FROM   INVENTORIES
  WHERE  START_SCHEDULE IS NOT NULL
    AND  END_SCHEDULE   IS NOT NULL
    AND  DAY_OF_WEEK    IS NOT NULL
)
SELECT
    ROWNUM               AS ID_SCHEDULE,
    NULL                 AS SEASON,   
    ds.START_TIME,
    ds.END_TIME,
    ds.DAY_OF_WEEK
FROM distinct_slots ds;


-- Follow table
INSERT INTO FOLLOW (ID_SHOP,
                    ID_SCHEDULE)
SELECT DISTINCT
       iv.ID_SHOP,
       sch.ID_SCHEDULE
FROM   INVENTORIES iv

      
JOIN   SCHEDULE sch
  ON   sch.DAY_OF_WEEK = iv.DAY_OF_WEEK
 AND   sch.START_TIME  = iv.START_SCHEDULE
 AND   sch.END_TIME    = iv.END_SCHEDULE

    
JOIN   SHOP sp
  ON   sp.ID_SHOP = iv.ID_SHOP

WHERE  iv.ID_SHOP        IS NOT NULL
  AND  iv.DAY_OF_WEEK    IS NOT NULL
  AND  iv.START_SCHEDULE IS NOT NULL
  AND  iv.END_SCHEDULE   IS NOT NULL

  AND NOT EXISTS (
        SELECT 1
        FROM   FOLLOW f
        WHERE  f.ID_SHOP     = iv.ID_SHOP
          AND  f.ID_SCHEDULE = sch.ID_SCHEDULE
      );

--INSERTING BUILDING FROM FARMS.CSV
INSERT INTO BUILDING (
  ID_BUILDING,
  NAME_BUILDING,
  DESCRIPTION,
  ID_PLACE
)
SELECT
  TO_NUMBER(ID_FARM) AS ID_BUILDING,
  'Building #' || ID_FARM AS NAME_BUILDING,
  'This is a building for farm #' || ID_FARM AS DESCRIPTION,
  (
    SELECT ID_PLACE
    FROM PLACE p
    WHERE p.LOCATION_NAME = f.LOCATION_NAME
    AND ROWNUM = 1
  ) AS ID_PLACE
FROM (
  SELECT ID_FARM, LOCATION_NAME,
         ROW_NUMBER() OVER (PARTITION BY ID_FARM ORDER BY ROWNUM) AS rn
  FROM FARMS
  WHERE ID_FARM IS NOT NULL AND LOCATION_NAME IS NOT NULL
) f
WHERE f.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM BUILDING b WHERE b.ID_BUILDING = TO_NUMBER(f.ID_FARM)
  );


--inserting Farms in Building from Player_Data.csv
INSERT INTO BUILDING (
  ID_BUILDING,
  NAME_BUILDING,
  DESCRIPTION,
  ID_PLACE
)
SELECT
  TO_NUMBER(ID_FARM),
  'Building from player_data #' || ID_FARM,
  'Auto-created from PLAYER_DATA',
  NULL
FROM (
  SELECT DISTINCT ID_FARM
  FROM PLAYER_DATA
  WHERE ID_FARM IS NOT NULL
) pd
WHERE NOT EXISTS (
  SELECT 1 FROM BUILDING b WHERE b.ID_BUILDING = TO_NUMBER(pd.ID_FARM)
);

--INSERTING INTO FARM FROM PLAYER_DATA.CSV
INSERT INTO FARM (
  ID_FARM,
  HECTARES,
  SPECIALIZATION,
  ID_PLAYER
)
SELECT
  TO_NUMBER(f.ID_FARM),
  TO_NUMBER(f.HECTARES),
  f.SPECIALIZATION,
  TO_NUMBER(f.ID) AS ID_PLAYER
FROM (
  SELECT 
    ID_FARM,
    HECTARES,
    SPECIALIZATION,
    ID,
    ROW_NUMBER() OVER (PARTITION BY ID_FARM ORDER BY ROWNUM) AS rn
  FROM PLAYER_DATA
  WHERE ID_FARM IS NOT NULL 
    AND HECTARES IS NOT NULL 
    AND SPECIALIZATION IS NOT NULL
) f
WHERE f.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM FARM ff WHERE ff.ID_FARM = TO_NUMBER(f.ID_FARM)
  );

--INSERTING INTO FARM FROM FARMS.CSV
INSERT INTO FARM (
  ID_FARM,
  HECTARES,
  SPECIALIZATION,
  ID_PLAYER
)
SELECT
  id_farm_num,
  --DEFAULT VALUE GENERATED
  1.0 AS HECTARES,
  'General' AS SPECIALIZATION,
  NULL AS ID_PLAYER
FROM (
  SELECT DISTINCT TO_NUMBER(ID_FARM) AS id_farm_num
  FROM FARMS
  WHERE ID_FARM IS NOT NULL
) f
WHERE f.id_farm_num NOT IN (SELECT ID_FARM FROM FARM);

--TODO ASK IF THIS IS OKAY TO UPDATE AND CHECK POSSIBLE RELATIONS
UPDATE FARM f
SET ID_PLAYER = (
  SELECT TO_NUMBER(pd.ID)
  FROM PLAYER_DATA pd
  WHERE TO_NUMBER(pd.ID_FARM) = f.ID_FARM
    AND TO_NUMBER(pd.ID) IN (SELECT ID_PLAYER FROM PLAYER)
    AND ROWNUM = 1
)
WHERE f.ID_PLAYER IS NULL
  AND EXISTS (
    SELECT 1
    FROM PLAYER_DATA pd
    WHERE TO_NUMBER(pd.ID_FARM) = f.ID_FARM
      AND TO_NUMBER(pd.ID) IN (SELECT ID_PLAYER FROM PLAYER)
  );

--INSERTING INTO FARMBUILDING FROM FARMS.CSV
INSERT INTO FARMBUILDING (
  ID_FARM_BUILDING,
  NAME_BUILDING,
  DESCRIPTION,
  BUILDING_SIZE,
  ID_FARM
)
SELECT
  TO_NUMBER(f.ID) AS ID_FARM_BUILDING,
  f.NAME,
  f.DESCRIPTION,
  TO_NUMBER(f.BUILDING_SIZE),
  TO_NUMBER(f.ID_FARM)
FROM (
  SELECT 
    ID,
    NAME,
    DESCRIPTION,
    BUILDING_SIZE,
    ID_FARM,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) AS rn
  FROM FARMS
  WHERE ID IS NOT NULL
    AND NAME IS NOT NULL
    AND BUILDING_SIZE IS NOT NULL
    AND ID_FARM IS NOT NULL
) f
WHERE f.rn = 1
  AND EXISTS (
    SELECT 1 FROM FARM fa WHERE fa.ID_FARM = TO_NUMBER(f.ID_FARM)
  )
  AND NOT EXISTS (
    SELECT 1 FROM FARMBUILDING fb WHERE fb.ID_FARM_BUILDING = TO_NUMBER(f.ID)
  );

--INSERTING INTO BARN FROM FARMS.CSV
INSERT INTO BARN (
  ID_BARN,
  MAX_CAPACITY,
  OCCUPIED_SPOTS
)
SELECT
  TO_NUMBER(f.ID) AS ID_BARN,
  TO_NUMBER(f.CAPACITY) AS MAX_CAPACITY,
  TO_NUMBER(f.OCCUPIED_SPOTS) AS OCCUPIED_SPOTS
FROM (
  SELECT 
    ID,
    CAPACITY,
    OCCUPIED_SPOTS,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) AS rn
  FROM FARMS
  WHERE ID IS NOT NULL AND CAPACITY IS NOT NULL AND OCCUPIED_SPOTS IS NOT NULL
) f
WHERE f.rn = 1
  AND EXISTS (
    SELECT 1 FROM FARMBUILDING fb WHERE fb.ID_FARM_BUILDING = TO_NUMBER(f.ID)
  )
  AND NOT EXISTS (
    SELECT 1 FROM BARN b WHERE b.ID_BARN = TO_NUMBER(f.ID)
  );

--INSERT INTO ANIMAL FROM ANIMALS_PRODUCTS.CSV
INSERT INTO ANIMAL (
  ID_ANIMAL,
  NAME_ANIMAL,
  AGE,
  ID_ANIMAL_SPECIE,
  HEALTH,
  ID_BARN,
  QUANTITY
)
SELECT
  TO_NUMBER(ap.ID) AS ID_ANIMAL,
  ap.NAME,
  TO_NUMBER(ap.AGE),
  s.ID_ANIMAL_SPECIE, 
  ap.HEALTH_STATUS,
  CASE 
    WHEN ap.ID_BARN_BUILDING IS NOT NULL THEN TO_NUMBER(ap.ID_BARN_BUILDING)
    ELSE NULL
  END AS ID_BARN,
  1 AS QUANTITY
FROM (
  SELECT 
    ID,
    NAME,
    AGE,
    HEALTH_STATUS,
    ANIMAL_SPECIE,
    ID_BARN_BUILDING,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) AS rn
  FROM ANIMALS_PRODUCTS
  WHERE 
    ID IS NOT NULL AND
    NAME IS NOT NULL AND
    AGE IS NOT NULL AND
    HEALTH_STATUS IS NOT NULL AND
    ANIMAL_SPECIE IS NOT NULL
) ap
LEFT JOIN ANIMAL_SPECIE s
  ON s.SPECIE_NAME = ap.ANIMAL_SPECIE
WHERE ap.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM ANIMAL an WHERE an.ID_ANIMAL = TO_NUMBER(ap.ID)
  );

--TO RANDOM GENERATE FOR PRODUCT ID
CREATE SEQUENCE SEQ_PRODUCT_ID START WITH 1000 INCREMENT BY 1;

--insert into product from animal_products.csv
INSERT INTO PRODUCT (
  ID_PRODUCT,
  NAME_PRODUCT,
  ID_ANIMAL_SPECIE
)
SELECT
  SEQ_PRODUCT_ID.NEXTVAL AS ID_PRODUCT,
  ap.PRODUCT AS NAME_PRODUCT,
  s.ID_ANIMAL_SPECIE
FROM (
  SELECT 
    PRODUCT,
    ANIMAL_SPECIE,
    ROW_NUMBER() OVER (PARTITION BY PRODUCT ORDER BY ROWNUM) AS rn
  FROM ANIMALS_PRODUCTS
  WHERE 
    PRODUCT IS NOT NULL AND 
    ANIMAL_SPECIE IS NOT NULL
) ap
JOIN ANIMAL_SPECIE s
  ON s.SPECIE_NAME = ap.ANIMAL_SPECIE
WHERE ap.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM PRODUCT p WHERE p.NAME_PRODUCT = ap.PRODUCT
  );

--INSERT INTO PRODUCE FROM ANIMAL, PRODUCT TABLES AND ANIMALS_PRODUCT.CSV (QUALITY)
INSERT INTO PRODUCE (
  ID_ANIMAL,
  ID_PRODUCT,
  PRODUCTION_DATE,
  EXPIRATION_DATE,
  QUALITY
)
SELECT
  TO_NUMBER(ap.ID) AS ID_ANIMAL,
  p.ID_PRODUCT,
  TRUNC(SYSDATE - DBMS_RANDOM.VALUE(0, 30)) AS PRODUCTION_DATE,
  TRUNC(SYSDATE + DBMS_RANDOM.VALUE(30, 90)) AS EXPIRATION_DATE,
  ap.QUALITY
FROM (
  SELECT 
    ID,
    PRODUCT,
    QUALITY,
    ROW_NUMBER() OVER (PARTITION BY ID, PRODUCT ORDER BY ROWNUM) AS rn
  FROM ANIMALS_PRODUCTS
  WHERE 
    ID IS NOT NULL AND 
    PRODUCT IS NOT NULL AND 
    QUALITY IS NOT NULL
) ap
JOIN ANIMAL a ON TO_NUMBER(ap.ID) = a.ID_ANIMAL
JOIN PRODUCT p ON p.NAME_PRODUCT = ap.PRODUCT
WHERE ap.rn = 1
  AND NOT EXISTS (
    SELECT 1 
    FROM PRODUCE pr 
    WHERE pr.ID_ANIMAL = TO_NUMBER(ap.ID)
      AND pr.ID_PRODUCT = p.ID_PRODUCT
  );

--INSERT INTO CULTIVATIONFIELD FROM FARMS.CSV
INSERT INTO CULTIVATIONFIELD (
  ID_FIELD,
  COST,
  STATE
)
SELECT
  TO_NUMBER(f.ID) AS ID_FIELD,
  TO_NUMBER(f.BUILDING_COST) AS COST,
  f.STATUS AS STATE
FROM (
  SELECT 
    ID,
    BUILDING_COST,
    STATUS,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) AS rn
  FROM FARMS
  WHERE 
    ID IS NOT NULL AND 
    BUILDING_COST IS NOT NULL AND 
    STATUS IS NOT NULL
) f
INNER JOIN FARMBUILDING fb
  ON TO_NUMBER(f.ID) = fb.ID_FARM_BUILDING
WHERE f.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM CULTIVATIONFIELD cf WHERE cf.ID_FIELD = TO_NUMBER(f.ID)
  );

--TO AUTOGENERATE THE ID FOR ID_CROP
CREATE SEQUENCE SEQ_CROP_ID START WITH 1000 INCREMENT BY 1;


--INSERT INTO CROP FROM THE FARMS.CSV
INSERT INTO CROP (
  ID_CROP,
  NAME_CROP,
  GROWING_SEASON,
  GROWTH_DURATION,
  QUALITY
)
SELECT
  SEQ_CROP_ID.NEXTVAL AS ID_CROP,
  f.CROP AS NAME_CROP,
  f.SEASON_NAME AS GROWING_SEASON,
  TO_NUMBER(f.GROWTH_TIME) AS GROWTH_DURATION,
  f.QUALITY
FROM (
  SELECT 
    CROP,
    SEASON_NAME,
    GROWTH_TIME,
    QUALITY,
    ROW_NUMBER() OVER (PARTITION BY CROP ORDER BY ROWNUM) AS rn
  FROM FARMS
  WHERE 
    CROP IS NOT NULL AND 
    SEASON_NAME IS NOT NULL AND 
    GROWTH_TIME IS NOT NULL AND 
    QUALITY IS NOT NULL
) f
WHERE f.rn = 1
  AND NOT EXISTS (
    SELECT 1 FROM CROP c WHERE c.NAME_CROP = f.CROP
  );


--INSERT INTO GROW FROM THE CULTIVATION FIELD AND CROP TABLES
INSERT INTO GROW (
  ID_FIELD,
  ID_CROP
)
SELECT
  TO_NUMBER(f.ID) AS ID_FIELD,
  c.ID_CROP
FROM FARMS f
JOIN CROP c ON c.NAME_CROP = f.CROP
WHERE 
  f.ID IS NOT NULL AND 
  f.CROP IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 FROM GROW g
    WHERE g.ID_FIELD = TO_NUMBER(f.ID)
      AND g.ID_CROP = c.ID_CROP
  );

-- relationships
CREATE SEQUENCE SEQ_RELATIONSHIP_ID START WITH 1000 INCREMENT BY 1;

INSERT INTO RELATIONSHIP (
  ID_RELATIONSHIP,
  ID_CHARACTER1,
  ID_CHARACTER2,
  AFFECTION_LEVEL,
  TYPE_RELATION
)
SELECT
  SEQ_RELATIONSHIP_ID.NEXTVAL,
  LEAST (TO_NUMBER(ID) , TO_NUMBER(OTHER_PERSON))      AS ID_CHARACTER1,
  GREATEST(TO_NUMBER(ID) , TO_NUMBER(OTHER_PERSON))    AS ID_CHARACTER2,
  TO_NUMBER(RELATION_POINTS)                           AS AFFECTION_LEVEL,
  RELATION_TYPE
FROM (
  SELECT r.*,
         ROW_NUMBER() OVER (
           PARTITION BY
             LEAST  (TO_NUMBER(r.ID), TO_NUMBER(r.OTHER_PERSON)),
             GREATEST(TO_NUMBER(r.ID), TO_NUMBER(r.OTHER_PERSON))
           ORDER BY NVL(TO_NUMBER(r.RELATION_POINTS),0) DESC
         ) AS rn
  FROM   RESIDENTS r
  WHERE  r.OTHER_PERSON    IS NOT NULL
    AND  r.RELATION_TYPE   IS NOT NULL
    AND  r.RELATION_POINTS IS NOT NULL
    AND  TO_NUMBER(r.ID) <> TO_NUMBER(r.OTHER_PERSON)        
) dedup
WHERE rn = 1
  AND LEAST  (TO_NUMBER(ID), TO_NUMBER(OTHER_PERSON)) IN (SELECT ID_CHARACTER FROM CHARACTER)
  AND GREATEST(TO_NUMBER(ID), TO_NUMBER(OTHER_PERSON)) IN (SELECT ID_CHARACTER FROM CHARACTER)
  AND NOT EXISTS (
        SELECT 1
        FROM   RELATIONSHIP rel
        WHERE  rel.ID_CHARACTER1 = LEAST  (TO_NUMBER(ID), TO_NUMBER(OTHER_PERSON))
          AND  rel.ID_CHARACTER2 = GREATEST(TO_NUMBER(ID), TO_NUMBER(OTHER_PERSON))
      );



CREATE SEQUENCE SEQ_MISSION_ID START WITH 1000 INCREMENT BY 1;


INSERT INTO MISSION (
  ID_MISSION,
  NAME,
  DESCRIPTION
)
SELECT
  SEQ_MISSION_ID.NEXTVAL AS ID_MISSION,
  pd.MISSION_NAME,
  pd.DESCRIPTION
FROM (
  SELECT DISTINCT
    MISSION_NAME,
    DESCRIPTION
  FROM PLAYER_DATA
  WHERE 
    MISSION_NAME IS NOT NULL
    AND DESCRIPTION IS NOT NULL
) pd
WHERE NOT EXISTS (
  SELECT 1
  FROM MISSION m
  WHERE m.NAME = pd.MISSION_NAME
);


INSERT INTO PLAYER_MISSION (
  ID_PLAYER,
  ID_MISSION,
  START_DATE,
  END_DATE,
  IS_COMPLETED
)
SELECT
  TO_NUMBER(pd.ID),
  m.ID_MISSION,
  pd.START_DATE,
  pd.END_DATE,
  CASE
    WHEN pd.END_DATE > pd.START_DATE THEN 1
    ELSE 0
  END
FROM (
  SELECT 
    MISSION_NAME,
    START_DATE,
    END_DATE,
    ID,
    ROW_NUMBER() OVER (PARTITION BY ID, MISSION_NAME ORDER BY ROWNUM) AS rn
  FROM PLAYER_DATA
  WHERE 
    MISSION_NAME IS NOT NULL
    AND START_DATE IS NOT NULL
    AND END_DATE IS NOT NULL
    AND ID IS NOT NULL
) pd
JOIN MISSION m ON m.NAME = pd.MISSION_NAME
WHERE pd.rn = 1
  AND TO_NUMBER(pd.ID) IN (SELECT ID_PLAYER FROM PLAYER)
  AND NOT EXISTS (
    SELECT 1
    FROM PLAYER_MISSION pm
    WHERE pm.ID_PLAYER = TO_NUMBER(pd.ID)
      AND pm.ID_MISSION = m.ID_MISSION
  );


CREATE SEQUENCE SEQ_PLACE_ID START WITH 1000 INCREMENT BY 1;

INSERT INTO PLACE (ID_PLACE, LOCATION_NAME, COORDINATES)
WITH uniq_places AS (
  SELECT DISTINCT
    rs.LOCATION_NAME,
    rs.COORDENATES        AS COORDINATES
  FROM   SCHEDULES rs
  WHERE  rs.LOCATION_NAME IS NOT NULL
    AND  rs.COORDENATES   IS NOT NULL
)
SELECT
  SEQ_PLACE_ID.NEXTVAL,
  up.LOCATION_NAME,
  up.COORDINATES
FROM   uniq_places up
LEFT   JOIN PLACE p
  ON p.LOCATION_NAME = up.LOCATION_NAME
 AND p.COORDINATES   = up.COORDINATES
WHERE  p.ID_PLACE IS NULL;    

CREATE SEQUENCE SEQ_SCHEDULE_ID START WITH 1000 INCREMENT BY 1;

INSERT INTO SCHEDULE (ID_SCHEDULE, SEASON, START_TIME, END_TIME, DAY_OF_WEEK)
WITH uniq_sched AS (
  SELECT DISTINCT
    rs.SEASON_NAME     AS SEASON,
    rs.START_TIME,
    rs.END_TIME,
    rs.DAY_OF_WEEK
  FROM   SCHEDULES rs
  WHERE  rs.SEASON_NAME IS NOT NULL
    AND  rs.START_TIME  IS NOT NULL
    AND  rs.END_TIME    IS NOT NULL
    AND  rs.DAY_OF_WEEK IS NOT NULL
)
SELECT
  SEQ_SCHEDULE_ID.NEXTVAL,
  us.SEASON,
  us.START_TIME,
  us.END_TIME,
  us.DAY_OF_WEEK
FROM   uniq_sched us
LEFT   JOIN SCHEDULE s
  ON NVL(s.SEASON,' ')    = NVL(us.SEASON,' ')
 AND s.START_TIME         = us.START_TIME
 AND s.END_TIME           = us.END_TIME
 AND s.DAY_OF_WEEK        = us.DAY_OF_WEEK
WHERE  s.ID_SCHEDULE IS NULL;  

INSERT INTO HAS (ID_INHABITANT, ID_PLACE, ID_SCHEDULE)
SELECT
  TO_NUMBER(rs.ID_RESIDENT)     AS ID_INHABITANT,
  p.ID_PLACE,
  sch.ID_SCHEDULE
FROM   SCHEDULES rs

  -- match on the unique place
  JOIN PLACE    p
    ON p.LOCATION_NAME = rs.LOCATION_NAME
   AND p.COORDINATES   = rs.COORDENATES

  -- match on the unique schedule
  JOIN SCHEDULE sch
    ON NVL(sch.SEASON,' ')    = NVL(rs.SEASON_NAME,' ')
   AND sch.START_TIME         = rs.START_TIME
   AND sch.END_TIME           = rs.END_TIME
   AND sch.DAY_OF_WEEK        = rs.DAY_OF_WEEK

WHERE NOT EXISTS (
  SELECT 1
  FROM   HAS h
  WHERE  h.ID_INHABITANT = TO_NUMBER(rs.ID_RESIDENT)
    AND  h.ID_PLACE      = p.ID_PLACE
    AND  h.ID_SCHEDULE   = sch.ID_SCHEDULE
);

--letters
INSERT INTO LETTER (
  ID_LETTER,
  CONTENT,
  FONT,
  ID_ITEM,
  ID_MISSION
)
WITH RankedLetters AS (
  SELECT
    l.ID,
    l.TEXT_LETTER,
    l.FONT_STYLE,
    l.ITEM_SENDED,
    l.MISSION_NAME,
    ROW_NUMBER() OVER (PARTITION BY l.ID ORDER BY ROWNUM) AS rn
  FROM LETTERS l
  WHERE l.ID IS NOT NULL
)
SELECT
  TO_NUMBER(ID) AS ID_LETTER,
  TEXT_LETTER   AS CONTENT,
  FONT_STYLE    AS FONT,
  TO_NUMBER(ITEM_SENDED) AS ID_ITEM,
  (
    SELECT m.ID_MISSION
    FROM MISSION m
    WHERE m.NAME = RankedLetters.MISSION_NAME
    AND ROWNUM = 1
  ) AS ID_MISSION
FROM RankedLetters
WHERE rn = 1
  AND ITEM_SENDED IS NOT NULL
  AND TEXT_LETTER IS NOT NULL
  AND NOT EXISTS (
    SELECT 1 FROM LETTER lt WHERE lt.ID_LETTER = TO_NUMBER(RankedLetters.ID)
  );

-- receive
INSERT INTO RECEIVE (
  ID_INHABITANT,
  ID_PLAYER,
  ID_LETTER,
  EMOTION
)
SELECT DISTINCT
  TO_NUMBER(l.ID_RESIDENT),
  TO_NUMBER(l.ID_PLAYER),
  TO_NUMBER(l.ID),
  l.EMOTION
FROM LETTERS l
WHERE l.ID_RESIDENT IS NOT NULL
  AND l.ID_PLAYER IS NOT NULL
  AND l.ID IS NOT NULL
  AND NOT EXISTS (
    SELECT 1
    FROM RECEIVE r
    WHERE r.ID_INHABITANT = TO_NUMBER(l.ID_RESIDENT)
      AND r.ID_PLAYER = TO_NUMBER(l.ID_PLAYER)
      AND r.ID_LETTER = TO_NUMBER(l.ID)
  );
