

-- ITEM TABLE
INSERT INTO ITEM(ID_ITEM, NAME, DESCRIPTION, PRICE_TO_BUY, PRICE_TO_SELL)
SELECT
    TO_NUMBER(ID),
    NAME,
    DESCRIPTION,
    TO_NUMBER(PRICE_TO_BUY),
    TO_NUMBER(PRICE_TO_SELL)
FROM ITEMS_DATA;

-- FOOD TABLE
INSERT INTO FOOD (ID_FOOD, INGREDIENTS, ENERGY_REGAIN, HEALTH_REGAIN)
SELECT DISTINCT
   TO_NUMBER(ID),
   INGREDIENTS,
   TO_NUMBER(ENERGY),
   TO_NUMBER(HEALTH)
FROM ITEMS_DATA
WHERE INGREDIENTS IS NOT NULL AND ENERGY IS NOT NULL AND HEALTH IS NOT NULL;

-- SEED TABLE
INSERT INTO SEED (ID_SEED, SEED_TYPE, NAME_CROP)
SELECT
   TO_NUMBER(ID),
   TYPE,
   NAME_CROP
FROM ITEMS_DATA
WHERE NAME_CROP IS NOT NULL;

-- SUPPLY TABLE
INSERT INTO SUPPLY (ID_SUPPLY, NUTRITIONAL_VALUE, NUTRITIONAL_QUALITIES)
SELECT
   TO_NUMBER(ID),
   TO_NUMBER(NUTRITIONAL_VALUE),
   QUALITY
FROM ITEMS_DATA
WHERE NUTRITIONAL_VALUE IS NOT NULL
 AND QUALITY IS NOT NULL
 AND NOT EXISTS (
     SELECT 1 FROM SUPPLY s
     WHERE s.ID_SUPPLY = TO_NUMBER(ITEMS_DATA.ID)
 );

-- ANIMAL SPECIE TABLE
INSERT INTO ANIMAL_SPECIE (ID_ANIMAL_SPECIE, SPECIE_NAME)
SELECT ROWNUM, SPECIE_NAME
FROM (
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ITEMS_DATA WHERE ANIMAL_SPECIE IS NOT NULL
   UNION
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ANIMALS_PRODUCTS WHERE ANIMAL_SPECIE IS NOT NULL
);


-- PLACE TABLE 
INSERT INTO PLACE (
 ID_PLACE,
 LOCATION_NAME,
 COORDINATES,
 DESCRIPTION
)
SELECT
 ROWNUM   AS ID_PLACE,
 LOCATION_NAME,
 COORDINATES,
 DESCRIPTION
FROM (
 -- 1) from festivity shops 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES,
   DESCRIPTION
 FROM FESTIVITY_SHOPS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 2) from festivity persons
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES,
   DESCRIPTION
 FROM FESTIVITY_PERSONS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 3) from events 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES,
   DESCRIPTION
 FROM EVENTS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 4) from schedules 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES,
   NULL
 FROM SCHEDULES
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
);  



-- Character (PLAYER_IDs only)
INSERT INTO CHARACTER (
  ID_CHARACTER,
  NAME,
  AGE,
  GENDER,
  ID_VILLAGE
)
SELECT
  TO_NUMBER(ID) AS ID_CHARACTER,
  NAME,
  TO_NUMBER(AGE) AS AGE,
  GENDER,
  NULL AS ID_VILLAGE  -- Your peer will populate this
FROM (
  -- Keep only the first occurrence of each ID
  SELECT pd.*,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) as rn
  FROM PLAYER_DATA pd
) filtered
WHERE filtered.rn = 1;  -- Only keeping unique IDs, no limit


-- PLAYER
INSERT INTO PLAYER (
  ID_PLAYER,
  AVATAR_APPEARANCE,
  NICKNAME,
  GOLD,
  EXPERIENCE,
  SKILL,
  SKILL_LEVEL,
  ID_INVENTORY
)
SELECT
  TO_NUMBER(ID) AS ID_PLAYER,
  APPARENCE AS AVATAR_APPEARANCE,
  NICKNAME,
  TO_NUMBER(GOLD) AS GOLD,
  TO_NUMBER(EXPERIENCE) AS EXPERIENCE,
  SKILL,
  TO_NUMBER(SKILL_LEVEL) AS SKILL_LEVEL,
  inv.ID_INVENTORY
FROM (
  -- Get unique player entries with a row number
  SELECT pd.*,
    ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ROWNUM) as rn
  FROM PLAYER_DATA pd
) filtered
JOIN (
  -- Get all inventory IDs with a row number
  SELECT ID_INVENTORY, 
         ROWNUM as inventory_row_num
  FROM INVENTORY
) inv ON filtered.rn = inv.inventory_row_num
WHERE filtered.rn = 1;  -- Only keep unique IDs


-- SHOP table
INSERT INTO SHOP (
  ID_SHOP,
  NAME_SHOP,
  ID_PLACE,
  ID_INVENTORY
)
SELECT
  shop_data.ID_SHOP,
  shop_data.NAME_SHOP,
  shop_data.ID_PLACE,
  (next_inventory_id + ROWNUM - 1) AS ID_INVENTORY
FROM (
  -- Union all unique shop IDs from both sources
  SELECT 
    s.ID_SHOP,
    COALESCE(t.NAME, 'Shop #' || s.ID_SHOP) AS NAME_SHOP,
    (SELECT MIN(ID_PLACE) 
     FROM PLACE 
     WHERE LOCATION_NAME = s.LOCATION_NAME
     AND (COORDINATES = s.COORDINATES OR (COORDINATES IS NULL AND s.COORDINATES IS NULL))
    ) AS ID_PLACE,
    ROW_NUMBER() OVER (PARTITION BY s.ID_SHOP ORDER BY s.ID_SHOP) AS rn
  FROM (
    -- Get all unique shops from both sources
    SELECT ID_SHOP, LOCATION_NAME, COORDENATES AS COORDINATES
    FROM FESTIVITY_SHOPS 
    WHERE ID_SHOP IS NOT NULL
    
    UNION
    
    -- For shops only in TRANSACTIONS, use LOCATION_NAME from TRANSACTIONS
    SELECT 
      t.ID_SHOP, 
      t.LOCATION_NAME, 
      NULL AS COORDINATES
    FROM TRANSACTIONS t
    WHERE t.ID_SHOP IS NOT NULL
    AND NOT EXISTS (
      SELECT 1 FROM FESTIVITY_SHOPS fs 
      WHERE fs.ID_SHOP = t.ID_SHOP
    )
  ) s
  LEFT JOIN (
    -- Get names from TRANSACTIONS
    SELECT 
      ID_SHOP,
      MAX(NAME) AS NAME
    FROM TRANSACTIONS
    GROUP BY ID_SHOP
  ) t ON s.ID_SHOP = t.ID_SHOP
) shop_data,
(
  -- Subquery for next inventory ID
  SELECT CASE 
         WHEN MAX(ID_INVENTORY) IS NULL THEN 1 
         ELSE MAX(ID_INVENTORY) + 1 
         END AS next_inventory_id 
  FROM (
    SELECT ID_INVENTORY FROM PLAYER
    UNION
    SELECT ID_INVENTORY FROM SHOP
  )
) inventory_data
WHERE shop_data.rn = 1
AND NOT EXISTS (SELECT 1 FROM SHOP WHERE ID_SHOP = shop_data.ID_SHOP);

