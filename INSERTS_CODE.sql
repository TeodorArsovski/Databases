-- ITEM TABLE
INSERT INTO ITEM (
   ID_ITEM, NAME, DESCRIPTION, PRICE_TO_BUY, PRICE_TO_SELL
)
SELECT
   TO_NUMBER(ID),
   NAME,
   DESCRIPTION,
   TO_NUMBER(PRICE_TO_BUY),
   TO_NUMBER(PRICE_TO_SELL)
FROM ITEMS_DATA;

-- FOOD TABLE
INSERT INTO FOOD (ID_FOOD, INGREDIENTS, ENERGY_REGAIN, HEALTH_REGAIN)
SELECT
   TO_NUMBER(ID),
   INGREDIENTS,
   TO_NUMBER(ENERGY),
   TO_NUMBER(HEALTH)
FROM ITEMS_DATA
WHERE INGREDIENTS IS NOT NULL;

-- SEED TABLE
INSERT INTO SEED (ID_SEED, SEED_TYPE, NAME_CROP)
SELECT
   TO_NUMBER(ID),
   TYPE,
   NAME_CROP
FROM ITEMS_DATA
WHERE NAME_CROP IS NOT NULL;

-- SUPPLY TABLE
INSERT INTO SUPPLY (ID_SUPPLY, NUTRITIONAL_VALUE, NUTRITIONAL_QUALITIES)
SELECT
   TO_NUMBER(ID),
   TO_NUMBER(NUTRITIONAL_VALUE),
   QUALITY
FROM ITEMS_DATA
WHERE NUTRITIONAL_VALUE IS NOT NULL
 AND QUALITY IS NOT NULL
 AND NOT EXISTS (
     SELECT 1 FROM SUPPLY s
     WHERE s.ID_SUPPLY = TO_NUMBER(ITEMS_DATA.ID)
 );

-- ANIMAL SPECIE TABLE
INSERT INTO ANIMAL_SPECIE (ID_ANIMAL_SPECIE, SPECIE_NAME)
SELECT ROWNUM, SPECIE_NAME
FROM (
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ITEMS_DATA WHERE ANIMAL_SPECIE IS NOT NULL
   UNION
   SELECT DISTINCT ANIMAL_SPECIE AS SPECIE_NAME FROM ANIMALS_PRODUCTS WHERE ANIMAL_SPECIE IS NOT NULL
);

-- INVENTORY TABLE
INSERT INTO INVENTORY (ID_INVENTORY)
SELECT ROWNUM
FROM (
   -- Label source to avoid UNION collapsing duplicates
   SELECT 'P_' || ID AS src_id FROM PLAYER_DATA
   UNION
   SELECT 'S_' || ID_SHOP FROM FESTIVITY_SHOPS
   UNION
   SELECT 'S_' || ID_SHOP FROM TRANSACTIONS
   WHERE ID_SHOP NOT IN (
       SELECT ID_SHOP FROM FESTIVITY_SHOPS
   )
);


-- PLACE TABLE 
INSERT INTO PLACE (
 ID_PLACE,
 LOCATION_NAME,
 COORDINATES
)
SELECT
 ROWNUM   AS ID_PLACE,
 LOCATION_NAME,
 COORDINATES
FROM (
 -- 1) from festivity shops 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM FESTIVITY_SHOPS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 2) from festivity persons
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM FESTIVITY_PERSONS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 3) from events 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM EVENTS
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
 UNION
 -- 4) from schedules 
 SELECT DISTINCT
   LOCATION_NAME,
   COORDENATES AS COORDINATES
 FROM SCHEDULES
 WHERE LOCATION_NAME IS NOT NULL
   AND COORDENATES   IS NOT NULL
);



/*
INSERT INTO SHOP (
    ID_SHOP,
    NAME_SHOP,
    SPECIALIZATION,
    ID_PLACE,
    ID_INVENTORY
)
SELECT 
    ID_SHOP, 
    NAME_SHOP,
    SPECIALIZATION,
    ID_PLACE,
    (500 + ROWNUM) AS ID_INVENTORY
FROM (
    SELECT 
        t.ID_SHOP, 
        t.NAME AS NAME_SHOP,
        t.SPECIALIZATION,
        (SELECT ID_PLACE FROM PLACE WHERE LOCATION_NAME = t.LOCATION_NAME) AS ID_PLACE,
        ROW_NUMBER() OVER (PARTITION BY t.ID_SHOP ORDER BY t.ID_SHOP) AS rn
    FROM TRANSACTIONS t
    WHERE t.ID_SHOP IS NOT NULL
    AND t.NAME IS NOT NULL
)
WHERE rn = 1
AND NOT EXISTS (SELECT 1 FROM SHOP WHERE ID_SHOP = ID_SHOP);
*/


-- SHOP table
INSERT INTO SHOP (
    ID_SHOP,
    NAME_SHOP,
    SPECIALIZATION,
    ID_PLACE,
    ID_INVENTORY
)
SELECT 
    ID_SHOP, 
    NAME_SHOP,
    SPECIALIZATION,
    ID_PLACE,
    (500 + (SELECT COUNT(*) FROM SHOP) + ROWNUM) AS ID_INVENTORY
FROM (
    -- Use ROW_NUMBER to get only first occurrence of each ID_SHOP
    SELECT 
        fs.ID_SHOP, 
        NULL AS NAME_SHOP,
        NULL AS SPECIALIZATION,
        (SELECT ID_PLACE FROM PLACE WHERE LOCATION_NAME = fs.LOCATION_NAME) AS ID_PLACE,
        ROW_NUMBER() OVER (PARTITION BY fs.ID_SHOP ORDER BY fs.ID_SHOP) AS rn
    FROM FESTIVITY_SHOPS fs
    WHERE fs.ID_SHOP IS NOT NULL
)
WHERE rn = 1
AND NOT EXISTS (SELECT 1 FROM SHOP WHERE ID_SHOP = ID_SHOP);

